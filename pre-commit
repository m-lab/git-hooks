#!/bin/bash

# This code is intended to be used in a directory called git-hooks.  It
# is a language agnostic tester and linter, and should lint, test, and run
# coverage for any and all languages you happen to use.
#
# To make git run unit tests and lint tests, softlink this file into the
# .git/hooks directory of the repo you want to test.  Assuming you have
# git-hooks checked out into your home directory, the following command will
# get that done:
#   ln -s ${HOME}/git-hooks/pre-commit .git/hooks/pre-commit
#
# We expect that the PWD for this code is the root of the repo.

set -e -u -x -o pipefail

# We use short options for common commands because some users of this module use
# the busybox versions of some of these commands, and those only support short
# options.

# If there is a .travis.yml file, lint it in a special way.
if git ls-files | grep -q '^\.travis\.yml$'; then
  if [[ -x ./travis-pre-commit ]]; then
    ./travis-pre-commit
  elif which travis; then
    travis lint -x
  else
    echo "No travis binary available for syntax checking"
  fi
fi

# If there is any YAML code, lint it.
if git ls-files | grep -q -e '\.yaml$' -e '\.yml$'; then
  if [[ -x ./yaml-pre-commit ]]; then
    ./yaml-pre-commit
  elif which yamllint; then
    # Use the relaxed linter mode as a starter. The default mode is too noisy on
    # all our existing files, and the conversation about what we want to care about
    # has not yet happened.
    git ls-files | grep -e '\.yaml$' -e '\.yml$' | xargs yamllint -d relaxed
  else
    echo "YAML files are present but yamllint is not"
  fi
fi

# If there is any .json code, lint it.
if git ls-files | grep -q '\.json$'; then
  if [[ -x ./json-pre-commit ]]; then
    ./json-pre-commit
  elif which jsonlint; then
    git ls-files | grep '\.json$' | xargs jsonlint -q
  else
    echo ".json files are present but jsonlint is not."
  fi
fi

# If there is any python code, run either the repo's custom python-pre-commit
# script or run the git-hooks python pre-commit script.
if git ls-files | grep -q '\.py$'; then
  if [[ -x ./python-pre-commit ]]; then
    ./python-pre-commit
  elif [[ -x ./git-hooks/python-pre-commit ]]; then
    ./git-hooks/python-pre-commit
  else
    echo "No python pre-commit found, but one should exist." 1>&2
    false
  fi
fi

# If there is go code, run either the repo's custom go pre-commit script or run
# a very generic go pre-commit script.
if git ls-files | grep -q '\.go$'; then
  if [[ -x ./go-pre-commit ]]; then
    ./go-pre-commit
  else
    # We call both build and test to ensure that packages that have no tests
    # will at least be built.
    go build ./...
    go test ./... -race
  fi
fi
