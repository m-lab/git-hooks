#!/bin/bash

# This code is intended to be used as part of a submodule called git-hooks.

# prepare-commit-msg is a shell script that gets called by git with the temp
# filename of the future commit message as its first argument. Its purpose is
# to edit that file in order to make the commit message better/more complete.
#
# It runs code coverage and runs the linter and a bunch of formatters over the
# code, and then appends the output of those tools as comments at the bottom of
# the commit message.  However, it can also be run without a command-line
# argument, just in case you want to see what its output is going to be without
# running "git commit". In that case, we do the same things, but we don't
# append anything to a file.
#
# To make git run this script, softlink this file into the .git/hooks
# directory.  The following command will get that done:
#   ln -s ../../git-hooks/prepare-commit-msg .git/hooks/prepare-commit-msg
#
# We expect that the PWD for this code is the root of the repo using git-hooks
# as a submodule.

set -e -u -x -o pipefail

# We use short options for common commands because some users of this module use
# the busybox versions of some of these commands, and those only support short
# options.

# Shellfiles is a helper function to list all files written in shell.
# Frequently shell scripts are given filenames that don't end in .sh, but we
# would still like to find those files for checking.
shellfiles() {
  (
    git ls-files | grep -q '\.sh$'
    git ls-files | while read -r; do
      if [[ -f $REPLY ]] && (head -n1 "${REPLY}" | grep -q '^#!/bin/bash\b'); then
        echo "${REPLY}"
      fi
    done
  ) | sort -u
}

# Go through each kind of file we might create a message for, and create a
# message for all files of that type.  Send the output of this process to the
# right place, depending on the arguments with which this script was invoked.
(
  # If there is a .travis.yml file, lint it in a special way.
  if git ls-files | grep -q '^\.travis\.yml$'; then
    if [[ -x ./travis-prepare-commit-msg ]]; then
      ./travis-prepare-commit-msg
    elif which travis > /dev/null; then
      if [[ "$(travis lint -x)" != "valid" ]]; then
        echo "Travis linter found a problem:"
        travis lint -x || true
      fi
    else
      echo ".travis.yml found but no travis binary available for linting"
    fi
  fi

  # If there is any .yml code, lint it.
  if git ls-files | grep -q '\.yml$'; then
    if [[ -x ./yaml-prepare-commit-msg ]]; then
      ./yaml-prepare-commit-msg
    elif which yamllint > /dev/null; then
      # Use the relaxed linter mode as a starter. The default mode is too noisy on
      # all our existing files, and the conversation about what we want to care about
      # has not yet happened.
      OUTPUT="$(git ls-files | grep '\.yml$' | (xargs yamllint -d relaxed || true))"
      if [[ -n ${OUTPUT} ]]; then
        cat <<EOF
yamllint output:
${OUTPUT}
EOF
      fi
    else
      echo ".yml files are present but yamllint is not"
    fi
  fi

  # If there is any .json code, lint it.
  if git ls-files | grep -q '\.json$'; then
    if [[ -x ./json-prepare-commit-msg ]]; then
      ./json-prepare-commit-msg
    elif which jsonlint; then
      OUTPUT=""
      git ls-files | grep '\.json$' | while read JSONFILE; do
        FILE_OUTPUT=$(diff "${JSONFILE}" <(jsonlint "${JSONFILE}" || true) || true)
        if [[ -n ${FILE_OUTPUT} ]]; then
          OUTPUT="${OUTPUT} jsonlint reports a diff for ${JSONFILE}:\n${FILE_OUTPUT}\n"
        fi
      done
      if [[ -n ${OUTPUT} ]]; then
        cat <<EOF
jsonlint:
${OUTPUT}
EOF
      fi
    else
      echo ".json files are present but jsonlint is not."
    fi
  fi

  # If there is any python code, run either the repo's custom
  # python-prepare-commit-msg script or run the git-hooks
  # python-prepare-commit-msg script.
  if git ls-files | grep -q '\.py$'; then
    if [[ -x ./python-prepare-commit-msg ]]; then
      ./python-prepare-commit-msg
    elif [[ -x ./git-hooks/python-prepare-commit-msg ]]; then
      ./git-hooks/python-prepare-commit-msg
    else
      echo "No python-prepare-commit-msg found, but one should exist." 1>&2
      false
    fi
  fi

  # If there is go code, run either the repo's custom go prepare-commit-msg
  # script or run a very generic go linter.
  if git ls-files | grep -q '\.go$'; then
    if [[ -x ./go-prepare-commit-msg ]]; then
      ./go-prepare-commit-msg
    else
      OUTPUT="$(golint ./... || true; go vet ./... || true)"
      if [[ -n ${OUTPUT} ]]; then
        cat <<EOF
golint and go vet found the following issues:
${OUTPUT}
EOF
      fi
      FILES="$(git ls-files | grep '\.go$' | xargs gofmt -s -l)"
      if [[ -n ${FILES} ]]; then
        for f in ${FILES}; do
          echo "gofmt diff for $f:"
          gofmt -s -d "$f"
        done
      fi
    fi
  fi

  # If there is shell code (files ending in .sh or files with the first line
  # #!/bin/bash), then run shellcheck if you can.
  if [[ -n $(shellfiles) ]] ; then
    if [[ -x ./shell-prepare-commit-msg ]]; then
      ./shell-prepare-commit-msg
    elif which shellcheck > /dev/null; then
      # Shellcheck exits with a non-zero error code if it finds any warnings,
      # which is a bad thing in a linter, but we can't change it. So we briefly
      # turn off the -e option, because we want errors from shellcheck to be
      # non-fatal to the prepare-commit-msg script.
      echo "Output of shellcheck:"
      set +e
      shellfiles | xargs shellcheck
      set -e
      echo "shellcheck complete"
    else
      echo "Shell files found but shellcheck not installed"
    fi
  fi
) | (
  if [[ $# -gt 0 ]]; then
    # If arguments were passed in, assume we were invoked by a call to git.
    if [[ $# -gt 1 ]] && [[ "$2" == message ]]; then
      # If this is a call from 'git -m', send the output to stderr and don't
      # mess up the prepared message.
      sed -e 's/^/# /' 1>&2
    else
      # If this is not a call from 'git -m', then append the output to the file
      # commented out so that the user can edit the resulting file to show or
      # hide the output message.
      sed -e 's/^/# /' >> "$1"
    fi
  else
    # If no filename argument was passed in, then just act as a pass-through.
    cat -
  fi
)
